{"version":3,"sources":["../../src/pages/about/about.module.ts","../../src/providers/api.service.ts","../../node_modules/@ionic/storage/es2015/index.js","../../src/pages/about/about.ts","../../node_modules/@ionic/storage/es2015/storage.js","../../node_modules/localforage/dist/localforage.js","../../node_modules/localforage-cordovasqlitedriver/dist/localforage-cordovasqlitedriver.js","../../node_modules/rxjs/add/observable/forkJoin.js","../../node_modules/rxjs/add/operator/map.js"],"names":[],"mappings":"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CAAC,WAAW,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,mEAAG,CAAC,QAAQ,EAAE,mEAAG,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,cAAI;YAC1D,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,mEAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,KAAK,CAAC,eAAK;YACV,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,gBAAC;AAAD,CAAC;AAhBY,SAAS;IATrB,wEAAS,CAAC;QACP,IAAI,EAAE,WAAW;KACpB,CAAC;IAED,wEAAS,CAAC;QACP,QAAQ,EAAE,YAAY;OACG;KAC5B,CAAC;cAMqE;AAYtE;SAhBY,SAAS,e;;;;;;;;;;;;;;;;;ACdA;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA,aAAa;AACb,mCAAmC,sEAAsE,EAAE;AAC3G;AACA;AACA;AACA,aAAa;AACb,0CAA0C,uBAAuB,EAAE;AACnE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+BAA+B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,2BAA2B,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA,mDAAmD,oBAAoB,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qCAAqC,EAAE;AAC1F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;0DC7NA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAA2D,mBAAmB,gDAAgD,aAAa,KAAK,MAAM,gCAAgC,SAAS,qCAAqC,SAAS,mCAAmC,OAAO,KAAK,OAAO,qBAAqB,aAAa,0BAA0B,0BAA0B,gBAAgB,UAAU,UAAU,0CAA0C,8BAAwB,oBAAoB,8CAA8C,qCAAqC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,0CAA0C,YAAY,WAAW,YAAY,SAAS,GAAG;AAClzB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,CAAC,EAAE,MAAM;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,qIAAqI;AACtI,CAAC,GAAG;AACJ;AACA;AACA;AACA;AACA;;AAEA,CAAC,qIAAqI;AACtI,CAAC,EAAE,MAAM;AACT;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB;AACrB,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oCAAoC,yBAAyB;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAmC,YAAY;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB,qBAAqB;AACrB,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,yBAAyB;AAC5D;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,QAAQ;AACrD;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC;AACvC,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;;;AAGA;;AAEA;;AAEA,CAAC,EAAE,MAAM,EAAE,GAAG;AACd,CAAC,E;;;;;;;;AC5vED;AACA;AACA;AACA;AACA,CAAC,oBAAoB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;;AAEA;;AAEA;;AAEA,CAAC,G;;;;;;;;AC3JD;AACA;AACA;AACA;AACA,oC;;;;;;;;ACJA;AACA;AACA;AACA;AACA,+B","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { AboutPage } from './about';\r\n\r\nimport { ApiProvider } from './../../providers/api.service';\r\nimport { IonicStorageModule } from '@ionic/storage';\r\n \r\n@NgModule({\r\n    declarations: [\r\n        AboutPage\r\n    ],\r\n    imports: [\r\n        IonicPageModule.forChild(AboutPage),\r\n        IonicStorageModule.forRoot()\r\n    ],\r\n    exports: [\r\n        AboutPage\r\n    ],\r\n    providers: [\r\n        ApiProvider\r\n    ]\r\n})\r\n\r\nexport class AboutPageModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/about/about.module.ts","import { Injectable } from '@angular/core';\r\n\r\nimport { Http, Response } from '@angular/http';\r\nimport { ToastController, Events } from 'ionic-angular';\r\nimport { Storage } from '@ionic/storage';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/forkJoin';\r\nimport 'rxjs/add/operator/map';\r\n\r\nexport const API_CONFIG = {\r\n\turl: 'http://jsonplaceholder.typicode.com',\r\n\tapi_key: ''\r\n};\r\n\r\nexport const API = {\r\n\tPOSTS: { endpoint: '/posts', lifetime: 1 },\r\n\tUSERS: { endpoint: '/users', lifetime: 24 },\r\n\tCOMMENTS: { endpoint: '/comments', lifetime: 48 }\r\n};\r\n\r\n@Injectable()\r\nexport class ApiProvider {\r\n\r\n\tprivate error: any;\r\n\tprivate errorInstance: boolean = false;\r\n\r\n\tprivate message: string = 'Bitte Internetverbindung überprüfen';\r\n\tprivate button: string = 'Neu laden';\r\n\tprivate duration: number = 3000;\r\n\r\n\tprivate repeat: number = 3;\r\n\tprivate delay: number = 1000;\r\n\r\n\tprivate cache: boolean = true;\r\n\tprivate debug: boolean = false;\r\n\r\n\t/**\r\n\t * Enables debug mode. Debug mode does not need to be\r\n\t * disabled, it is disabled by default.\r\n\t * @return {boolean}\twhether debug got enabled or not\r\n\t */\r\n\tpublic enableDebug () : boolean {\r\n\t\t if (!this.debug) {\r\n\t\t\t console.info('Api Service: Debug mode enabled.');\r\n\t\t\t return this.debug = true;\r\n\t\t } else {\r\n\t\t\t console.warn('Api Service: Debug mode can not be enabled multiple times.');\r\n\t\t\t return false;\r\n\t\t }\r\n\t}\r\n\r\n\t/**\r\n\t * Enables cache. Cache does not need to be enabled,\r\n\t * it is enabled by default.\r\n\t * @return {boolean}\twhether cache could be enabled or not\r\n\t */\r\n\tpublic enableCache () : boolean {\r\n\t\tif (this.cache) {\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\tthis.cache = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disables cache. Cache is enabled by default.\r\n\t * @return {boolean}\twhether cache could be disabled or not\r\n\t */\r\n\tpublic disableCache () : boolean {\r\n\t\tif (this.cache) {\r\n\t\t\tthis.cache = false;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set cache status.\r\n\t * @return {boolean}\tcache status\r\n\t */\r\n\tpublic checkCache () : boolean {\r\n\t\treturn this.cache;\r\n\t}\r\n\r\n\t/**\r\n\t * You can customize your error message by passing\r\n\t * a message to this function.\r\n\t * @param message {string}\tmessage that is diplayed if request fails\r\n\t * @return {boolean}\tstatus, if the change worked\r\n\t */\r\n\tpublic setMessage (message: string) : boolean {\r\n\t\tif (this.debug) {\r\n\t\t\tif (this.error) {\r\n\t\t\t\tconsole.warn('Api Service: You can not change the toast, while its active.');\r\n\t\t\t} else {\r\n\t\t\t\tconsole.info('Api Service: Custom error message set.');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.error) {\r\n\t\t\tthis.message = message;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set error message.\r\n\t * @return {string}\tthe error message thats valid in this moment\r\n\t */\r\n\tpublic getMessage () : string {\r\n\t\treturn this.message;\r\n\t}\r\n\r\n\t/**\r\n\t * You can customize your button text by passing\r\n\t * a message to this function.\r\n\t * @param button {string}\tmessage that is displayed to reload\r\n\t * @return {boolean}\tstatus, if the change worked\r\n\t */\r\n\tpublic setButton (button: string) : boolean {\r\n\t\tif (this.debug) {\r\n\t\t\tif (this.error) {\r\n\t\t\t\tconsole.warn('Api Service: You can not change the toast, while its active.');\r\n\t\t\t} else {\r\n\t\t\t\tconsole.info('Api Service: Custom button text set.');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.error) {\r\n\t\t\tthis.button = button;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set button text.\r\n\t * @return {string}\tthe button text thats valid in this moment\r\n\t */\r\n\tpublic getButton () : string {\r\n\t\treturn this.button;\r\n\t}\r\n\r\n\t/**\r\n\t * You can customize the duration the error message is displayed\r\n\t * by passing a value in ms to this function.\r\n\t * @param duration {number}\r\n\t * @return void\r\n\t */\r\n\tpublic setDuration (duration: number) : boolean {\r\n\t\tif (this.debug) {\r\n\t\t\tif (this.error) {\r\n\t\t\t\tconsole.warn('Api Service: You can not change the toast, while its active.');\r\n\t\t\t} else {\r\n\t\t\t\tconsole.info('Api Service: Custom duration set.');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.error) {\r\n\t\t\tthis.duration = duration;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set duration.\r\n\t * @return {number}\tthe duration thats valid in this moment\r\n\t */\r\n\tpublic getDuration () : number {\r\n\t\treturn this.duration;\r\n\t}\r\n\r\n\t/**\r\n\t * You can customize the times a request gets repeated before\r\n\t * its being rejected by passing a value to this function.\r\n\t * @param repeat \r\n\t * @return {boolean}\tfeedback if repeat is set\r\n\t */\r\n\tpublic setRepeat (repeat: number) : boolean {\r\n\t\tif (this.debug) {\r\n\t\t\tconsole.info('Api Service: Custom repeat set.');\r\n\t\t}\r\n\r\n\t\tthis.repeat = repeat;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set repeat.\r\n\t * @return {number}\r\n\t */\r\n\tpublic getRepeat () : number {\r\n\t\treturn this.repeat;\r\n\t}\r\n\r\n\t/**\r\n\t * You can customize the delay between the requests by passing\r\n\t * a value in ms to this function.\r\n\t * @param delay \r\n\t * @return {boolean}\tfeedback if delay is set\r\n\t */\r\n\tpublic setDelay (delay: number) : boolean {\r\n\t\tif (this.debug) {\r\n\t\t\tconsole.info('Api Service: Custom delay set.');\r\n\t\t}\r\n\r\n\t\tthis.delay = delay;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set delay.\r\n\t * @return {number}\r\n\t */\r\n\tpublic getDelay () : number {\r\n\t\treturn this.delay;\r\n\t}\r\n\r\n\tconstructor(private http: Http, private storage: Storage, private toastCtrl: ToastController, private events: Events) {\r\n\t\tif (this.debug) {\r\n\t\t\tconsole.debug('ApiService initialized.');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param api {object | object Array}\tapi objects @see API\r\n\t * @param opt {string | string[]}\t\toptional parameters to endpoints \r\n\t * @return {Promise<object>}\tObject that includes all results or error\r\n\t */\r\n\tpublic get (api: { endpoint: string, lifetime: number } | { endpoint: string, lifetime: number }[], opt?: string | string[]) : Promise<object> {\r\n\t\t// mapping all parameters to a readable format\r\n\t\tvar requests;\r\n\t\tvar opts;\r\n\r\n\t\tif (!this.isArray(api)) {\r\n\t\t\tif (this.debug) {\r\n\t\t\t\tconsole.info('Api Service: Single request initialized.');\r\n\t\t\t}\r\n\r\n\t\t\t// building array of api request\r\n\t\t\trequests = [].concat(api);\r\n\t\t} else {\r\n\t\t\tif (this.debug) {\r\n\t\t\t\tconsole.info('Api Service: Multiple request initialized.');\r\n\t\t\t}\r\n\r\n\t\t\trequests = api;\r\n\t\t}\r\n\r\n\t\t// mapping parameters to array\r\n\t\tif (!this.isArray(opt)) {\r\n\t\t\topts = [].concat(opt);\r\n\t\t} else {\r\n\t\t\topts = opt;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t// start all api requests\r\n\t\t\tthis.multiplePromise(requests, opts).subscribe(result => {\r\n\t\t\t\t// map result for return\r\n\t\t\t\tvar values = new Array();\r\n\t\t\t\tfor (var i = 0; i < requests.length; i++) {\r\n\t\t\t\t\tvar temp = opts[i] ? opts[i] : '';\r\n\t\t\t\t\tvalues[requests[i].endpoint + temp] = result[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresolve(values);\r\n\t\t\t}, error => {\r\n\t\t\t\t// one or more requests failed somewhere\r\n\t\t\t\treject(error);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * You can test an object if it is an array or not.\r\n\t * @param test {any | any[]}\tarray or object to test\r\n\t * @return {boolean}\twhether the object is an array or not\r\n\t */\r\n\tprivate isArray (test: any | any[]) : boolean {\r\n\t\t// most common strategy to check if it's an array or not\r\n\t\treturn Object.prototype.toString.call(test) === '[object Array]';\r\n\t}\r\n\r\n\t/**\r\n\t * Forking all requests together and make them subscribable.\r\n\t * @param requests {object Array}\tapi objects @see API\r\n\t * @param opt {string | string[]}\toptional parameters to endpoints\r\n\t * @return {Observable<string[]>}\tall requests together\r\n\t */\r\n\tprivate multiplePromise (requests: { endpoint: string, lifetime: number }[], opt: string | string[] = []) : Observable<string[]> {\r\n\t\tvar result: Promise<string>[] = new Array();\r\n\r\n\t\t// creating array of all requests\r\n\t\tfor (var i = 0; i < requests.length; i++) {\r\n\t\t\tresult.push(this.request(this.concatUrl(requests[i], opt[i]), requests[i].lifetime));\r\n\t\t}\r\n\r\n\t\tif (this.debug) {\r\n\t\t\tconsole.info('Api Service: Forked ' + requests.length + ' requests together. Waiting for result.');\r\n\t\t}\r\n\r\n\t\t// fork all requests together and make them subscribable\r\n\t\treturn Observable.forkJoin(result);\r\n\t}\r\n\r\n\t/**\r\n\t * Building url based on url, endpoint, api key and\r\n\t * optional parameters.\r\n\t * @param api {object}\tapi object @see API\r\n\t * @param opt {string}\toptional parameter to endpoint\r\n\t * @return {string}\t\trequest ready url\r\n\t */\r\n\tprivate concatUrl (api: { endpoint: string, lifetime: number }, opt: string = '') : string {\r\n\t\tif (this.debug) {\r\n\t\t\tconsole.info('Api Service: Called url ' + API_CONFIG.url + api.endpoint + API_CONFIG.api_key + opt);\r\n\t\t}\r\n\r\n\t\treturn API_CONFIG.url + api.endpoint + API_CONFIG.api_key + opt;\r\n\t}\r\n\r\n\t/**\r\n\t * Requesting a single url, checking for cached results\r\n\t * and handle errors.\r\n\t * @param url {string}\t\t\turl to request\r\n\t * @param lifetime {number}\t\tlifetime in hours\r\n\t * @param number {number}\t\tinternal number (do not touch)\r\n\t * @return {Promise<string>}\tPromise of http request\r\n\t */\r\n\tprivate request (url: string, lifetime: number, number: number = 0) : Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (this.debug) {\r\n\t\t\t\tconsole.info('Api Service: Starting request ' + url + '.');\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCache(url).then(value => {\r\n\t\t\t\tif (value == null || (new Date().getTime() - new Date(value.timestamp).getTime()) > (lifetime * 3600000)) {\r\n\t\t\t\t\tif (this.debug) {\r\n\t\t\t\t\t\tconsole.info('Api Service: No cached values for ' +  url + ' found.');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.http.get(url).map(this.extract).subscribe(result => {\r\n\t\t\t\t\t\tif (this.debug) {\r\n\t\t\t\t\t\t\tconsole.info('Api Service: Request ' + url + ' successful.');\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t// case 1: normal request\r\n\t\t\t\t\t\tthis.cacheItems(result, url);\r\n\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t}, error => {\r\n\t\t\t\t\t\t// case 2: problems with request\r\n\t\t\t\t\t\tif (this.debug) {\r\n\t\t\t\t\t\t\tconsole.warn('Api Service: Request ' + url + ' failed.');\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tif (number < (this.repeat - 1)) {\r\n\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\tthis.request(url, lifetime, (number + 1)).then(result => {\r\n\t\t\t\t\t\t\t\t\t// request was successful after another try\r\n\t\t\t\t\t\t\t\t\tthis.cacheItems(result, url);\r\n\t\t\t\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t\t\t\t}).catch(error => {\r\n\t\t\t\t\t\t\t\t\t// request still not successful\r\n\t\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}, this.delay);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// all requests did fail\r\n\t\t\t\t\t\t\tif (!this.errorInstance) {\r\n\t\t\t\t\t\t\t\tthis.errorInstance = true;\r\n\t\t\t\t\t\t\t\tthis.error = this.errorMessage();\r\n\t\t\r\n\t\t\t\t\t\t\t\tthis.error.onDidDismiss((data, role) => {\r\n\t\t\t\t\t\t\t\t\tthis.events.publish('error:dismiss', data, role);\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t// deleting error message again\r\n\t\t\t\t\t\t\t\t\tthis.errorInstance = false;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\r\n\t\t\t\t\t\t\t\tthis.error.present();\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\tthis.events.subscribe('error:dismiss', (data, role) => {\r\n\t\t\t\t\t\t\t\tif (role == 'close') {\r\n\t\t\t\t\t\t\t\t\tthis.request(url, lifetime).then(result => {\r\n\t\t\t\t\t\t\t\t\t\tthis.cacheItems(result, url);\r\n\t\t\t\t\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t\t\t\t\t}).catch(error => {\r\n\t\t\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t\tthis.events.unsubscribe('error:dismiss');\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.debug) {\r\n\t\t\t\t\t\tconsole.info('Api Service: Cached values for ' + url + ' found.');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// trying to map result to json\r\n\t\t\t\t\t\tresolve(JSON.parse(value.value));\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t// fallback mapping to source\r\n\t\t\t\t\t\tresolve(value.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Extracting the result out of the response.\r\n\t * It is whether json or source.\r\n\t * @param res\r\n\t * @return {string}\tresult, whether json or source\r\n\t */\r\n\tprivate extract (res: Response) : string {\r\n\t\ttry {\r\n\t\t\t// trying to map result to json\r\n\t\t\treturn res.json();\r\n\t\t} catch (error) {\r\n\t\t\t// fallback mapping to source\r\n\t\t\treturn res.text();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returning the controller for error message\r\n\t * @return {any}\terror message toast controller\r\n\t */\r\n\tprivate errorMessage () : any {\r\n\t\treturn this.toastCtrl.create({\r\n\t\t\tmessage: this.message,\r\n\t\t\tduration: this.duration,\r\n\t\t\tposition: 'bottom',\r\n\t\t\tshowCloseButton: true,\r\n\t\t\tcloseButtonText: this.button,\r\n\t\t\tdismissOnPageChange: true\r\n\t\t});\r\n\t}\r\n\r\n    /**\r\n\t * Generates a hash string out of a raw string\r\n     * input. It is used to store and access data\r\n     * from remote requests.\r\n     * @param {string} raw  raw string input to generate hash from\r\n     * @returns {string}    generated hash string\r\n     */\r\n\tprivate static hash (raw: string) : string {\r\n\t\t// declare variables\r\n\t\tlet hash = 0, char;\r\n\r\n\t\tif (raw == null || raw.length == 0) {\r\n\t\t\t// catch empty string\r\n\t\t\treturn hash.toString();\r\n\t\t} else {\r\n\t\t\t// generate hash for full string\r\n            for (let i = 0; i < raw.length; i++) {\r\n                char = raw.charCodeAt(i); // get current char\r\n                hash = ((hash << 5) - hash) + char; // extend hash value\r\n                hash = hash & hash; // convert to 32bit integer\r\n            }\r\n\t\t}\r\n\r\n\t\t// parse hash number to string\r\n\t\treturn hash.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Cache result to hashed url.\r\n\t * @param result {string}\tresult to cache\r\n\t * @param url {string}\t\turl to cache to\r\n\t * @return none\r\n\t */\r\n\tprivate cacheItems (result: string, url: string) : void {\r\n\t\t// only use storage when cache is enabled\r\n\t\tif (this.cache) {\r\n\t\t\tthis.storage.set(ApiProvider.hash(url), { value: JSON.stringify(result), timestamp: new Date() });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Synchronize the storage request.\r\n\t * @param url {string}\turl to request from storage\r\n\t * @return {Promise}\tstorage element of url\r\n\t */\r\n\tprivate async getCache (url: string) : Promise<any> {\r\n\t\tif (this.cache) {\r\n\t\t\t// requesting storage when activated\r\n\t\t\treturn await this.storage.get(ApiProvider.hash(url));\r\n\t\t} else {\r\n\t\t\t// returning null promise when cache is disabled\r\n\t\t\treturn await new Promise((resolve, reject) => {\r\n\t\t\t\tresolve(null);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/api.service.ts","import { NgModule } from '@angular/core';\nimport { provideStorage, Storage, StorageConfigToken } from './storage';\nexport { StorageConfigToken, Storage };\nexport var IonicStorageModule = (function () {\n    function IonicStorageModule() {\n    }\n    IonicStorageModule.forRoot = function (storageConfig) {\n        if (storageConfig === void 0) { storageConfig = null; }\n        return {\n            ngModule: IonicStorageModule,\n            providers: [\n                { provide: StorageConfigToken, useValue: storageConfig },\n                { provide: Storage, useFactory: provideStorage, deps: [StorageConfigToken] },\n            ]\n        };\n    };\n    IonicStorageModule.decorators = [\n        { type: NgModule, args: [{},] },\n    ];\n    /** @nocollapse */\n    IonicStorageModule.ctorParameters = function () { return []; };\n    return IonicStorageModule;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/storage/es2015/index.js\n// module id = 266\n// module chunks = 0","import { Component } from '@angular/core';\r\nimport { NavController, IonicPage } from 'ionic-angular';\r\n\r\nimport { ApiProvider, API } from '../../providers/api.service';\r\n\r\n@IonicPage({\r\n    name: 'AboutPage'\r\n})\r\n\r\n@Component({\r\n    selector: 'page-about',\r\n    templateUrl: 'about.html'\r\n})\r\n\r\nexport class AboutPage {\r\n\r\n    public users: string[];\r\n\r\n    constructor(public navCtrl: NavController, private api: ApiProvider) {\r\n\r\n    }\r\n\r\n    public ionViewDidLoad () {\r\n        this.api.enableDebug();\r\n        this.api.get([API.COMMENTS, API.USERS], '?postId=1').then(data => {\r\n            this.users = data[API.USERS.endpoint];\r\n        }).catch(error => {\r\n            console.error('Fehlgeschlagen.');\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/about/about.ts","import { OpaqueToken } from '@angular/core';\nimport LocalForage from 'localforage';\nimport CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * cordova plugin add cordova-sqlite-storage --save\n * ```\n *\n * Next, install the package (comes by default for Ionic 2 apps >= RC.0)\n *\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: []\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(storage: Storage) {\n *\n *      storage.ready().then(() => {\n *\n *        // set a key/value\n *        storage.set('name', 'Max');\n *\n *        // Or to get a key/value pair\n *        storage.get('age').then((val) => {\n *          console.log('Your age is', val);\n *        })\n *      });\n *   }\n * }\n * ```\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * export function provideStorage() {\n *   return new Storage({ name: '__mydb' });\n * }\n *\n * @NgModule({\n *   declarations: ...,\n *   imports: [\n *     IonicStorageModule.forRoot({ useFactory: provideStorage })\n *   ],\n *   bootstrap: ...,\n *   entryComponents: ...,\n *    providers: []\n * })\n * export class AppModule {}\n * ```\n */\nexport var Storage = (function () {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n     * default is that exact ordering.\n     */\n    function Storage(config) {\n        var _this = this;\n        this._driver = null;\n        this._dbPromise = new Promise(function (resolve, reject) {\n            var db;\n            var defaultConfig = getDefaultConfig();\n            var actualConfig = Object.assign(defaultConfig, config || {});\n            LocalForage.defineDriver(CordovaSQLiteDriver).then(function () {\n                db = LocalForage.createInstance(actualConfig);\n            })\n                .then(function () { return db.setDriver(_this._getDriverOrder(actualConfig.driverOrder)); })\n                .then(function () {\n                _this._driver = db.driver();\n                resolve(db);\n            })\n                .catch(function (reason) { return reject(reason); });\n        });\n    }\n    Object.defineProperty(Storage.prototype, \"driver\", {\n        /**\n         * Get the name of the driver being used.\n         * @return Name of the driver\n         */\n        get: function () {\n            return this._driver;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reflect the readiness of the store.\n     * @return Promise that resolves when the store is ready\n     */\n    Storage.prototype.ready = function () {\n        return this._dbPromise;\n    };\n    Storage.prototype._getDriverOrder = function (driverOrder) {\n        return driverOrder.map(function (driver) {\n            switch (driver) {\n                case 'sqlite':\n                    return CordovaSQLiteDriver._driver;\n                case 'indexeddb':\n                    return LocalForage.INDEXEDDB;\n                case 'websql':\n                    return LocalForage.WEBSQL;\n                case 'localstorage':\n                    return LocalForage.LOCALSTORAGE;\n            }\n        });\n    };\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @return Promise that resolves with the value\n     */\n    Storage.prototype.get = function (key) {\n        return this._dbPromise.then(function (db) { return db.getItem(key); });\n    };\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @return Promise that resolves when the value is set\n     */\n    Storage.prototype.set = function (key, value) {\n        return this._dbPromise.then(function (db) { return db.setItem(key, value); });\n    };\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @return Promise that resolves when the value is removed\n     */\n    Storage.prototype.remove = function (key) {\n        return this._dbPromise.then(function (db) { return db.removeItem(key); });\n    };\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @return Promise that resolves when the store is cleared\n     */\n    Storage.prototype.clear = function () {\n        return this._dbPromise.then(function (db) { return db.clear(); });\n    };\n    /**\n     * @return Promise that resolves with the number of keys stored.\n     */\n    Storage.prototype.length = function () {\n        return this._dbPromise.then(function (db) { return db.length(); });\n    };\n    /**\n     * @return Promise that resolves with the keys in the store.\n     */\n    Storage.prototype.keys = function () {\n        return this._dbPromise.then(function (db) { return db.keys(); });\n    };\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @return Promise that resolves when the iteration has finished.\n     */\n    Storage.prototype.forEach = function (iteratorCallback) {\n        return this._dbPromise.then(function (db) { return db.iterate(iteratorCallback); });\n    };\n    return Storage;\n}());\nexport function getDefaultConfig() {\n    return {\n        name: '_ionicstorage',\n        storeName: '_ionickv',\n        driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n    };\n}\n;\nexport var StorageConfigToken = new OpaqueToken('STORAGE_CONFIG_TOKEN');\nexport function provideStorage(storageConfig) {\n    var config = !!storageConfig ? storageConfig : getDefaultConfig();\n    return new Storage(config);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/storage/es2015/storage.js\n// module id = 268\n// module chunks = 0","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.4.3\n    https://mozilla.github.io/localForage\n    (c) 2013-2016 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(2);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nexports.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nexports.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nexports.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nexports.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"2\":2}],2:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(1);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"1\":1}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {}\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here; just UA test for Safari (which, as of\n        // iOS 8/Yosemite, doesn't properly support IndexedDB).\n        // IndexedDB support is broken and different from Blink's.\n        // This is faster than the test case (and it's sync), so we just\n        // do this. *SIGH*\n        // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        if (typeof openDatabase !== 'undefined' && typeof navigator !== 'undefined' && navigator.userAgent && /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent)) {\n            return false;\n        }\n\n        return idb && typeof idb.open === 'function' &&\n        // Some Samsung/HTC Android 4.0-4.3 devices\n        // have older IndexedDB specs; if this isn't available\n        // their IndexedDB is too old for us to use.\n        // (Replaces the onupgradeneeded test.)\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined' && typeof _dereq_ !== 'undefined') {\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs;\nvar dbContexts;\nvar toString = Object.prototype.toString;\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/9c25a23/src/adapters/idb/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(txn) {\n    return new Promise$1(function (resolve) {\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve) {\n        deferredOperation.resolve = resolve;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function () {\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + ' can\\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Initialize a singleton container for all running localForages.\n    if (!dbContexts) {\n        dbContexts = {};\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = {\n            // Running localForages sharing a database.\n            forages: [],\n            // Shared database.\n            db: null,\n            // Database readiness (promise).\n            dbReady: null,\n            // Deferred operations on the database.\n            deferredOperations: []\n        };\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.get(key);\n\n            req.onsuccess = function () {\n                var value = req.result;\n                if (value === undefined) {\n                    value = null;\n                }\n                if (_isEncodedBlob(value)) {\n                    value = _decodeBlob(value);\n                }\n                resolve(value);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var iterationNumber = 1;\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (cursor) {\n                    var value = cursor.value;\n                    if (_isEncodedBlob(value)) {\n                        value = _decodeBlob(value);\n                    }\n                    var result = iterator(value, cursor.key, iterationNumber++);\n\n                    if (result !== void 0) {\n                        resolve(result);\n                    } else {\n                        cursor[\"continue\"]();\n                    }\n                } else {\n                    resolve();\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // The reason we don't _save_ null is because IE 10 does\n            // not support saving the `null` type in IndexedDB. How\n            // ironic, given the bug below!\n            // See: https://github.com/mozilla/localForage/issues/161\n            if (value === null) {\n                value = undefined;\n            }\n\n            transaction.oncomplete = function () {\n                // Cast to undefined so the value passed to\n                // callback/promise is the same as what one would get out\n                // of `getItem()` later. This leads to some weirdness\n                // (setItem('foo', undefined) will return `null`), but\n                // it's not my fault localStorage is our baseline and that\n                // it's weird.\n                if (value === undefined) {\n                    value = null;\n                }\n\n                resolve(value);\n            };\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n\n            var req = store.put(value, key);\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // We use a Grunt task to make this safe for IE and some\n            // versions of Android (including those used by Cordova).\n            // Normally IE won't like `.delete()` and will insist on\n            // using `['delete']()`, but we have a build step that\n            // fixes this for us now.\n            var req = store[\"delete\"](key);\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onerror = function () {\n                reject(req.error);\n            };\n\n            // The request will be also be aborted if we've exceeded our storage\n            // space.\n            transaction.onabort = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n            var req = store.clear();\n\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.count();\n\n            req.onsuccess = function () {\n                resolve(req.result);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var advanced = false;\n            var req = store.openCursor();\n            req.onsuccess = function () {\n                var cursor = req.result;\n                if (!cursor) {\n                    // this means there weren't enough keys\n                    resolve(null);\n\n                    return;\n                }\n\n                if (n === 0) {\n                    // We have the first key, return it if that's what they\n                    // wanted.\n                    resolve(cursor.key);\n                } else {\n                    if (!advanced) {\n                        // Otherwise, ask the cursor to skip ahead n\n                        // records.\n                        advanced = true;\n                        cursor.advance(n);\n                    } else {\n                        // When we get here, we've got the nth key.\n                        resolve(cursor.key);\n                    }\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var keys = [];\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (!cursor) {\n                    resolve(keys);\n                    return;\n                }\n\n                keys.push(cursor.key);\n                cursor[\"continue\"]();\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys\n};\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        });\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // TODO: Try to re-run the transaction.\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1\n};\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = dbInfo.name + '/';\n\n    if (dbInfo.storeName !== self._defaultConfig.storeName) {\n        dbInfo.keyPrefix += dbInfo.storeName + '/';\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    // Default API, from Gaia/localStorage.\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2\n};\n\n// Custom drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar CustomDrivers = {};\n\nvar DriverType = {\n    INDEXEDDB: 'asyncStorage',\n    LOCALSTORAGE: 'localStorageWrapper',\n    WEBSQL: 'webSQLStorage'\n};\n\nvar DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nvar driverSupport = {};\n// Check to see if IndexedDB is available and if it is the latest\n// implementation; it's our preferred backend library. We use \"_spec_test\"\n// as the name of the database because it's not the one we'll operate on,\n// but it's useful to make sure its using the right spec.\n// See: https://github.com/mozilla/localForage/issues/128\ndriverSupport[DriverType.INDEXEDDB] = isIndexedDBValid();\n\ndriverSupport[DriverType.WEBSQL] = isWebSQLValid();\n\ndriverSupport[DriverType.LOCALSTORAGE] = isLocalStorageValid();\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var key in arg) {\n                if (arg.hasOwnProperty(key)) {\n                    if (isArray(arg[key])) {\n                        arguments[0][key] = arg[key].slice();\n                    } else {\n                        arguments[0][key] = arg[key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nfunction isLibraryDriver(driverName) {\n    for (var driver in DriverType) {\n        if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        this.INDEXEDDB = DriverType.INDEXEDDB;\n        this.LOCALSTORAGE = DriverType.LOCALSTORAGE;\n        this.WEBSQL = DriverType.WEBSQL;\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver);\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n                var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n                if (isLibraryDriver(driverObject._driver)) {\n                    reject(namingError);\n                    return;\n                }\n\n                var customDriverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0; i < customDriverMethods.length; i++) {\n                    var customDriverMethod = customDriverMethods[i];\n                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var supportPromise = Promise$1.resolve(true);\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        supportPromise = driverObject._support();\n                    } else {\n                        supportPromise = Promise$1.resolve(!!driverObject._support);\n                    }\n                }\n\n                supportPromise.then(function (supportResult) {\n                    driverSupport[driverName] = supportResult;\n                    CustomDrivers[driverName] = driverObject;\n                    resolve();\n                }, reject);\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var self = this;\n        var getDriverPromise = Promise$1.resolve().then(function () {\n            if (isLibraryDriver(driverName)) {\n                switch (driverName) {\n                    case self.INDEXEDDB:\n                        return asyncStorage;\n                    case self.LOCALSTORAGE:\n                        return localStorageWrapper;\n                    case self.WEBSQL:\n                        return webSQLStorage;\n                }\n            } else if (CustomDrivers[driverName]) {\n                return CustomDrivers[driverName];\n            } else {\n                throw new Error('Driver not found.');\n            }\n        });\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(function (driver) {\n                            self._extend(driver);\n                            setDriverToConfig();\n\n                            self._ready = self._initStorage(self._config);\n                            return self._ready;\n                        })[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!driverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0; i < LibraryMethods.length; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/localforage/dist/localforage.js\n// module id = 269\n// module chunks = 0","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.cordovaSQLiteDriver = factory());\n}(this, function () { 'use strict';\n\n    function getSerializerPromise(localForageInstance) {\n        if (getSerializerPromise.result) {\n            return getSerializerPromise.result;\n        }\n        if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n            return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n        }\n        getSerializerPromise.result = localForageInstance.getSerializer();\n        return getSerializerPromise.result;\n    }\n\n    function getDriverPromise(localForageInstance, driverName) {\n        getDriverPromise.result = getDriverPromise.result || {};\n        if (getDriverPromise.result[driverName]) {\n            return getDriverPromise.result[driverName];\n        }\n        if (!localForageInstance || typeof localForageInstance.getDriver !== 'function') {\n            return Promise.reject(new Error('localforage.getDriver() was not available! ' + 'localforage v1.4+ is required!'));\n        }\n        getDriverPromise.result[driverName] = localForageInstance.getDriver(driverName);\n        return getDriverPromise.result[driverName];\n    }\n\n    function getWebSqlDriverPromise(localForageInstance) {\n        return getDriverPromise(localForageInstance, localForageInstance.WEBSQL);\n    }\n\n    /* global document, sqlitePlugin */\n    // we can't import this, since it gets defined later\n    // import sqlitePlugin from 'sqlitePlugin';\n\n    var deviceReady = new Promise(function (resolve, reject) {\n        if (typeof sqlitePlugin !== 'undefined') {\n            resolve();\n        } else if (typeof cordova === 'undefined') {\n            reject(new Error('cordova is not defined.'));\n        } else {\n            // Wait for Cordova to load\n            document.addEventListener(\"deviceready\", function () {\n                return resolve();\n            }, false);\n        }\n    });\n\n    var deviceReadyDone = deviceReady.catch(function () {\n        return Promise.resolve();\n    });\n\n    function getOpenDatabasePromise() {\n        return deviceReadyDone.then(function () {\n            if (typeof sqlitePlugin !== 'undefined' && typeof sqlitePlugin.openDatabase === 'function') {\n                return sqlitePlugin.openDatabase;\n            } else {\n                throw new Error('SQLite plugin is not present.');\n            }\n        });\n    }\n\n    // // If cordova is not present, we can stop now.\n    // if (!globalObject.cordova) {\n    //     return;\n    // }\n\n    // Open the cordova sqlite plugin database (automatically creates one if one didn't\n    // previously exist), using any options set in the config.\n    function _initStorage(options) {\n        var self = this;\n        var dbInfo = {\n            db: null\n        };\n\n        if (options) {\n            for (var i in options) {\n                dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n            }\n        }\n\n        var dbInfoPromise = getOpenDatabasePromise().then(function (openDatabase) {\n            return new Promise(function (resolve, reject) {\n                // Open the database; the openDatabase API will automatically\n                // create it for us if it doesn't exist.\n                try {\n                    dbInfo.location = dbInfo.location || 'default';\n                    dbInfo.db = openDatabase({\n                        name: dbInfo.name,\n                        version: String(dbInfo.version),\n                        description: dbInfo.description,\n                        size: dbInfo.size,\n                        location: dbInfo.location\n                    });\n                } catch (e) {\n                    reject(e);\n                }\n\n                // Create our key/value table if it doesn't exist.\n                dbInfo.db.transaction(function (t) {\n                    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                        self._dbInfo = dbInfo;\n                        resolve();\n                    }, function (t, error) {\n                        reject(error);\n                    });\n                });\n            });\n        });\n\n        var serializerPromise = getSerializerPromise(self);\n        var webSqlDriverPromise = getWebSqlDriverPromise(self);\n\n        return Promise.all([serializerPromise, webSqlDriverPromise, dbInfoPromise]).then(function (results) {\n            dbInfo.serializer = results[0];\n            return dbInfoPromise;\n        });\n    }\n\n    var cordovaSQLiteDriver = {\n        _driver: 'cordovaSQLiteDriver',\n        _initStorage: _initStorage,\n        _support: function _support() {\n            return getOpenDatabasePromise().then(function (openDatabase) {\n                return !!openDatabase;\n            }).catch(function () {\n                return false;\n            });\n        }\n    };\n\n    function wireUpDriverMethods(driver) {\n        var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\n        function wireUpDriverMethod(driver, methodName) {\n            driver[methodName] = function () {\n                var localForageInstance = this;\n                var args = arguments;\n                return getWebSqlDriverPromise(localForageInstance).then(function (webSqlDriver) {\n                    return webSqlDriver[methodName].apply(localForageInstance, args);\n                });\n            };\n        }\n\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            wireUpDriverMethod(driver, LibraryMethods[i]);\n        }\n    }\n\n    wireUpDriverMethods(cordovaSQLiteDriver);\n\n    return cordovaSQLiteDriver;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/localforage-cordovasqlitedriver/dist/localforage-cordovasqlitedriver.js\n// module id = 270\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/forkJoin.js\n// module id = 271\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 272\n// module chunks = 0"],"sourceRoot":""}